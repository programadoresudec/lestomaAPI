// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using lestoma.Data;

namespace lestoma.Data.Migrations
{
    [DbContext(typeof(LestomaContext))]
    [Migration("20230228015156_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("lestoma.Entidades.Models.EActividad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("FechaActualizacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_actualizacion_server");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_actividad");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.ToTable("actividad", "superadmin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5679927b-6e94-445a-9c9f-74c08178c262"),
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 37, DateTimeKind.Local).AddTicks(9846),
                            Ip = "N/A",
                            Nombre = "control de agua",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("f93a4811-fdb2-4234-959c-4c4ebb627ccb"),
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 37, DateTimeKind.Local).AddTicks(9881),
                            Ip = "N/A",
                            Nombre = "alimentacion de peces",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EAplicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NombreAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<short>("TiempoExpiracionToken")
                        .HasColumnType("smallint")
                        .HasColumnName("tiempo_expiracion_token");

                    b.HasKey("Id");

                    b.ToTable("aplicacion", "seguridad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreAplicacion = "App Movil",
                            TiempoExpiracionToken = (short)31
                        },
                        new
                        {
                            Id = 2,
                            NombreAplicacion = "Web",
                            TiempoExpiracionToken = (short)45
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EAuditoria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Accion")
                        .HasColumnType("text")
                        .HasColumnName("accion");

                    b.Property<string>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("PKTabla")
                        .HasColumnType("text")
                        .HasColumnName("pk");

                    b.Property<string>("Schema")
                        .HasColumnType("text")
                        .HasColumnName("schema");

                    b.Property<string>("Session")
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("Tabla")
                        .HasColumnType("text")
                        .HasColumnName("tabla");

                    b.Property<string>("TipoDeAplicacion")
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<string>("UsuarioBD")
                        .HasColumnType("text")
                        .HasColumnName("user_bd");

                    b.HasKey("Id");

                    b.ToTable("auditoria", "seguridad");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EBuzon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.ToTable("buzon", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EComponenteLaboratorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ActividadId")
                        .HasColumnType("uuid")
                        .HasColumnName("actividad_id");

                    b.Property<byte>("DireccionRegistro")
                        .HasColumnType("smallint")
                        .HasColumnName("direccion_registro");

                    b.Property<DateTime?>("FechaActualizacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_actualizacion_server");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("JsonEstadoComponente")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("descripcion_estado");

                    b.Property<Guid>("ModuloComponenteId")
                        .HasColumnType("uuid")
                        .HasColumnName("modulo_componente_id");

                    b.Property<string>("NombreComponente")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_componente");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<Guid>("UpaId")
                        .HasColumnType("uuid")
                        .HasColumnName("upa_id");

                    b.HasKey("Id");

                    b.HasIndex("ActividadId");

                    b.HasIndex("ModuloComponenteId");

                    b.HasIndex("UpaId");

                    b.ToTable("componente_laboratorio", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e95f08ab-6b4e-4d1f-aea7-85f0dc6848bf"),
                            ActividadId = new Guid("f93a4811-fdb2-4234-959c-4c4ebb627ccb"),
                            DireccionRegistro = (byte)0,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 169, DateTimeKind.Local).AddTicks(9043),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\r\n  \"Id\": \"98a74bd5-7390-4244-8b2e-255d3707071d\",\r\n  \"TipoEstado\": \"ON-OFF\",\r\n  \"ByteHexaFuncion\": \"F0\",\r\n  \"ByteDecimalFuncion\": 240\r\n}",
                            ModuloComponenteId = new Guid("7387b7ae-26af-434f-a83c-e29135629f97"),
                            NombreComponente = "BOMBA DE OXIGENO",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720")
                        },
                        new
                        {
                            Id = new Guid("853929b3-bee1-4601-9cf0-8704d43fb771"),
                            ActividadId = new Guid("f93a4811-fdb2-4234-959c-4c4ebb627ccb"),
                            DireccionRegistro = (byte)1,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 169, DateTimeKind.Local).AddTicks(9479),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\r\n  \"Id\": \"98a74bd5-7390-4244-8b2e-255d3707071d\",\r\n  \"TipoEstado\": \"ON-OFF\",\r\n  \"ByteHexaFuncion\": \"F0\",\r\n  \"ByteDecimalFuncion\": 240\r\n}",
                            ModuloComponenteId = new Guid("7387b7ae-26af-434f-a83c-e29135629f97"),
                            NombreComponente = "LUZ ESTANQUE",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720")
                        },
                        new
                        {
                            Id = new Guid("4a8e6897-7a48-4f18-92c0-ad07b24a1aaf"),
                            ActividadId = new Guid("f93a4811-fdb2-4234-959c-4c4ebb627ccb"),
                            DireccionRegistro = (byte)3,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 170, DateTimeKind.Local).AddTicks(9670),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\r\n  \"Id\": \"98a74bd5-7390-4244-8b2e-255d3707071d\",\r\n  \"TipoEstado\": \"ON-OFF\",\r\n  \"ByteHexaFuncion\": \"F0\",\r\n  \"ByteDecimalFuncion\": 240\r\n}",
                            ModuloComponenteId = new Guid("7387b7ae-26af-434f-a83c-e29135629f97"),
                            NombreComponente = "DOSIFICADOR DE ALIMENTO",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720")
                        },
                        new
                        {
                            Id = new Guid("629a5dcc-c2ec-4282-a619-3d52b0d5c5d2"),
                            ActividadId = new Guid("5679927b-6e94-445a-9c9f-74c08178c262"),
                            DireccionRegistro = (byte)2,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 170, DateTimeKind.Local).AddTicks(9687),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\r\n  \"Id\": \"f5f738c7-0dba-48ee-afea-b22530160653\",\r\n  \"TipoEstado\": \"LECTURA\",\r\n  \"ByteHexaFuncion\": \"0F\",\r\n  \"ByteDecimalFuncion\": 15\r\n}",
                            ModuloComponenteId = new Guid("05dc2a4b-7add-4d2a-94cd-f5be14472739"),
                            NombreComponente = "TEMPERATURA H2O",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720")
                        },
                        new
                        {
                            Id = new Guid("556a8400-6ca7-4986-b1a8-b5d9982e1ffd"),
                            ActividadId = new Guid("5679927b-6e94-445a-9c9f-74c08178c262"),
                            DireccionRegistro = (byte)0,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 170, DateTimeKind.Local).AddTicks(9714),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\r\n  \"Id\": \"f5f738c7-0dba-48ee-afea-b22530160653\",\r\n  \"TipoEstado\": \"LECTURA\",\r\n  \"ByteHexaFuncion\": \"0F\",\r\n  \"ByteDecimalFuncion\": 15\r\n}",
                            ModuloComponenteId = new Guid("05dc2a4b-7add-4d2a-94cd-f5be14472739"),
                            NombreComponente = "PH",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720")
                        },
                        new
                        {
                            Id = new Guid("8d0f4ea7-c228-4a2a-b804-5612bf31d997"),
                            ActividadId = new Guid("5679927b-6e94-445a-9c9f-74c08178c262"),
                            DireccionRegistro = (byte)1,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 170, DateTimeKind.Local).AddTicks(9719),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\r\n  \"Id\": \"f5f738c7-0dba-48ee-afea-b22530160653\",\r\n  \"TipoEstado\": \"LECTURA\",\r\n  \"ByteHexaFuncion\": \"0F\",\r\n  \"ByteDecimalFuncion\": 15\r\n}",
                            ModuloComponenteId = new Guid("05dc2a4b-7add-4d2a-94cd-f5be14472739"),
                            NombreComponente = "NIVEL TANQUE",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720")
                        },
                        new
                        {
                            Id = new Guid("6b693418-b841-4284-9315-6659b5d255e9"),
                            ActividadId = new Guid("5679927b-6e94-445a-9c9f-74c08178c262"),
                            DireccionRegistro = (byte)7,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 170, DateTimeKind.Local).AddTicks(9725),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\r\n  \"Id\": \"c781773b-7d7c-47f7-b5d0-34a4943ba907\",\r\n  \"TipoEstado\": \"AJUSTE\",\r\n  \"ByteHexaFuncion\": \"F0\",\r\n  \"ByteDecimalFuncion\": 240\r\n}",
                            ModuloComponenteId = new Guid("4edb4a8e-167b-4019-8e37-dd486051f4b3"),
                            NombreComponente = "SP_TEMPERATURA H2O",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720")
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EEstadoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DescripcionEstado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id");

                    b.ToTable("estado_usuario", "usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescripcionEstado = "verificar cuenta"
                        },
                        new
                        {
                            Id = 2,
                            DescripcionEstado = "Activado"
                        },
                        new
                        {
                            Id = 3,
                            DescripcionEstado = "Inactivo"
                        },
                        new
                        {
                            Id = 4,
                            DescripcionEstado = "Bloqueado"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ELaboratorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ComponenteLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("componente_laboratorio_id");

                    b.Property<bool>("EstadoInternet")
                        .HasColumnType("boolean")
                        .HasColumnName("estado_internet");

                    b.Property<DateTime>("FechaCreacionDispositivo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_dispositivo");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<string>("TramaEnviada")
                        .HasColumnType("text")
                        .HasColumnName("trama_enviada");

                    b.Property<string>("TramaRecibida")
                        .HasColumnType("text")
                        .HasColumnName("trama_recibida");

                    b.Property<double?>("ValorCalculadoTramaEnviada")
                        .HasColumnType("double precision")
                        .HasColumnName("dato_trama_enviada");

                    b.Property<double?>("ValorCalculadoTramaRecibida")
                        .HasColumnType("double precision")
                        .HasColumnName("dato_trama_recibida");

                    b.HasKey("Id");

                    b.HasIndex("ComponenteLaboratorioId");

                    b.ToTable("detalle_laboratorio", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = new Guid("352d30b6-44c2-4da7-aace-8156dcff8589"),
                            ComponenteLaboratorioId = new Guid("e95f08ab-6b4e-4d1f-aea7-85f0dc6848bf"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2023, 2, 27, 20, 51, 55, 171, DateTimeKind.Local).AddTicks(7767),
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 171, DateTimeKind.Local).AddTicks(3764),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TramaEnviada = "6FDAF029000000009834",
                            TramaRecibida = "49803CE33F8000008FC8",
                            ValorCalculadoTramaRecibida = 1.0
                        },
                        new
                        {
                            Id = new Guid("13324fde-11cf-4756-9a30-88afe097d678"),
                            ComponenteLaboratorioId = new Guid("853929b3-bee1-4601-9cf0-8704d43fb771"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2023, 2, 27, 20, 51, 55, 171, DateTimeKind.Local).AddTicks(9054),
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 171, DateTimeKind.Local).AddTicks(9040),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TramaEnviada = "495DF08E000000007B74",
                            TramaRecibida = "496D3C083F80000096D1",
                            ValorCalculadoTramaRecibida = 1.0
                        },
                        new
                        {
                            Id = new Guid("f67d3f0c-3957-4a8a-9502-8f5ca567b86b"),
                            ComponenteLaboratorioId = new Guid("556a8400-6ca7-4986-b1a8-b5d9982e1ffd"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2023, 2, 27, 20, 51, 55, 171, DateTimeKind.Local).AddTicks(9065),
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 171, DateTimeKind.Local).AddTicks(9063),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TramaEnviada = "493E0FA6000000007453",
                            TramaRecibida = "6FB2F0DC410E66663E8F",
                            ValorCalculadoTramaRecibida = 8.9000000000000004
                        },
                        new
                        {
                            Id = new Guid("d99db055-ef37-4e23-a63c-e910903ce182"),
                            ComponenteLaboratorioId = new Guid("556a8400-6ca7-4986-b1a8-b5d9982e1ffd"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2023, 2, 27, 20, 51, 55, 171, DateTimeKind.Local).AddTicks(9072),
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 171, DateTimeKind.Local).AddTicks(9070),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TramaEnviada = "493E0FA6000000007453",
                            TramaRecibida = "6FEFF08440D66666F1A3",
                            ValorCalculadoTramaRecibida = 6.7000000000000002
                        },
                        new
                        {
                            Id = new Guid("d4215f60-0b93-4a16-b951-08f75a43e03b"),
                            ComponenteLaboratorioId = new Guid("6b693418-b841-4284-9315-6659b5d255e9"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2023, 2, 27, 20, 51, 55, 172, DateTimeKind.Local).AddTicks(817),
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 172, DateTimeKind.Local).AddTicks(797),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TramaEnviada = "49F2F04541C00000A19A",
                            TramaRecibida = "6FEEF0D8434800001CA9",
                            ValorCalculadoTramaEnviada = 24.0,
                            ValorCalculadoTramaRecibida = 200.0
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EModuloComponente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("FechaActualizacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_actualizacion_server");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_modulo");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.ToTable("modulo_componente", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7387b7ae-26af-434f-a83c-e29135629f97"),
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 54, 992, DateTimeKind.Local).AddTicks(1392),
                            Ip = "N/A",
                            Nombre = "ACTUADORES",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("05dc2a4b-7add-4d2a-94cd-f5be14472739"),
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 54, 992, DateTimeKind.Local).AddTicks(3520),
                            Ip = "N/A",
                            Nombre = "SENSORES",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("4edb4a8e-167b-4019-8e37-dd486051f4b3"),
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 54, 992, DateTimeKind.Local).AddTicks(3533),
                            Ip = "N/A",
                            Nombre = "SET_POINT/CONTROL",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EProtocoloCOM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<byte>("PrimerByteTrama")
                        .HasColumnType("smallint")
                        .HasColumnName("primer_byte_trama");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("sigla");

                    b.Property<Guid>("UpaId")
                        .HasColumnType("uuid")
                        .HasColumnName("upa_id");

                    b.HasKey("Id");

                    b.HasIndex("UpaId");

                    b.ToTable("protocolo_com", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Peer to Peer",
                            PrimerByteTrama = (byte)73,
                            Sigla = "PP",
                            UpaId = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720")
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Broad Cast",
                            PrimerByteTrama = (byte)111,
                            Sigla = "BS",
                            UpaId = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720")
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Peer to Peer",
                            PrimerByteTrama = (byte)73,
                            Sigla = "PP",
                            UpaId = new Guid("9d935e26-2353-447e-97ba-5c3eccab9059")
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Broad Cast",
                            PrimerByteTrama = (byte)111,
                            Sigla = "BS",
                            UpaId = new Guid("9d935e26-2353-447e-97ba-5c3eccab9059")
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ERol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_rol");

                    b.HasKey("Id");

                    b.ToTable("rol", "usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreRol = "Super Administrador"
                        },
                        new
                        {
                            Id = 2,
                            NombreRol = "Administrador"
                        },
                        new
                        {
                            Id = 3,
                            NombreRol = "Auxiliar"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ESuperAdministrador", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("UsuarioId")
                        .HasColumnType("smallint")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.ToTable("super_administrador", "superadmin");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            UsuarioId = (short)1
                        },
                        new
                        {
                            Id = (short)2,
                            UsuarioId = (short)2
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<short>("CantidadActividades")
                        .HasColumnType("smallint")
                        .HasColumnName("cantidad_actividades");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaActualizacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_actualizacion_server");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_upa");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<int>("SuperAdminId")
                        .HasColumnType("integer")
                        .HasColumnName("superadmin_id");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.ToTable("upa", "superadmin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720"),
                            CantidadActividades = (short)5,
                            Descripcion = "queda ubicada en facatativá",
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 33, DateTimeKind.Local).AddTicks(6056),
                            Ip = "N/A",
                            Nombre = "finca el vergel",
                            Session = "Anonimo",
                            SuperAdminId = 1,
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("9d935e26-2353-447e-97ba-5c3eccab9059"),
                            CantidadActividades = (short)2,
                            Descripcion = "queda ubicada en la universidad cundinamarca extensión faca",
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 33, DateTimeKind.Local).AddTicks(6093),
                            Ip = "N/A",
                            Nombre = "ucundinamarca",
                            Session = "Anonimo",
                            SuperAdminId = 1,
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpaActividad", b =>
                {
                    b.Property<Guid>("UpaId")
                        .HasColumnType("uuid")
                        .HasColumnName("upa_id");

                    b.Property<Guid>("ActividadId")
                        .HasColumnType("uuid")
                        .HasColumnName("actividad_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.Property<DateTime?>("FechaActualizacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_actualizacion_server");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("UpaId", "ActividadId", "UsuarioId");

                    b.HasIndex("ActividadId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("upa_actividad", "superadmin");

                    b.HasData(
                        new
                        {
                            UpaId = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720"),
                            ActividadId = new Guid("5679927b-6e94-445a-9c9f-74c08178c262"),
                            UsuarioId = 3,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 38, DateTimeKind.Local).AddTicks(2873),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720"),
                            ActividadId = new Guid("f93a4811-fdb2-4234-959c-4c4ebb627ccb"),
                            UsuarioId = 3,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 38, DateTimeKind.Local).AddTicks(2889),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720"),
                            ActividadId = new Guid("5679927b-6e94-445a-9c9f-74c08178c262"),
                            UsuarioId = 4,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 38, DateTimeKind.Local).AddTicks(2892),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("d9e6e4cf-043f-4b0c-b960-6489f71e7720"),
                            ActividadId = new Guid("f93a4811-fdb2-4234-959c-4c4ebb627ccb"),
                            UsuarioId = 4,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 38, DateTimeKind.Local).AddTicks(2895),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("9d935e26-2353-447e-97ba-5c3eccab9059"),
                            ActividadId = new Guid("5679927b-6e94-445a-9c9f-74c08178c262"),
                            UsuarioId = 5,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 38, DateTimeKind.Local).AddTicks(2898),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("9d935e26-2353-447e-97ba-5c3eccab9059"),
                            ActividadId = new Guid("f93a4811-fdb2-4234-959c-4c4ebb627ccb"),
                            UsuarioId = 5,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 38, DateTimeKind.Local).AddTicks(2900),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("clave");

                    b.Property<string>("CodigoRecuperacion")
                        .HasColumnType("text")
                        .HasColumnName("codigo_recuperacion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("estado_id");

                    b.Property<DateTime?>("FechaActualizacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_actualizacion_server");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<DateTime?>("FechaVencimientoCodigo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("vencimiento_codigo_recuperacion");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<int>("RolId")
                        .HasColumnType("integer")
                        .HasColumnName("rol_id");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("semilla");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("RolId");

                    b.ToTable("usuario", "usuarios");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Apellido = "Lestoma-APP",
                            Clave = "SqBCPAc/Va0ra6oJGBfhYVaZFSyixtuF72y7mSXxbuY=",
                            Email = "diegop177@hotmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 16, DateTimeKind.Local).AddTicks(9068),
                            Ip = "N/A",
                            Nombre = "Diego-Super",
                            RolId = 1,
                            Salt = "omvm2+Y4TJcdRZcKVDyUQA==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 1,
                            Apellido = "Movil",
                            Clave = "SqBCPAc/Va0ra6oJGBfhYVaZFSyixtuF72y7mSXxbuY=",
                            Email = "lestomaudecmovil@gmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 16, DateTimeKind.Local).AddTicks(5506),
                            Ip = "N/A",
                            Nombre = "Lestoma-APP",
                            RolId = 1,
                            Salt = "omvm2+Y4TJcdRZcKVDyUQA==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "Lestoma",
                            Clave = "25AA4SF9hb7eCuxBNmWHE0galR+GwmprI41LT5GjkGo=",
                            Email = "diegoarturo1598@hotmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 24, DateTimeKind.Local).AddTicks(7658),
                            Ip = "N/A",
                            Nombre = "Administrador",
                            RolId = 2,
                            Salt = "zt9vX3AnKFO9ZMYM5OSPZA==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 4,
                            Apellido = "Lestoma",
                            Clave = "2lSzmKUBtbnWulyFDr45UumQ7Pg7X96PPlobrXjECFM=",
                            Email = "programadoresuc@outlook.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 32, DateTimeKind.Local).AddTicks(5692),
                            Ip = "N/A",
                            Nombre = "Auxiliar 1",
                            RolId = 3,
                            Salt = "qWXTQ7izTdauqGVF/Oawxg==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 5,
                            Apellido = "Lestoma",
                            Clave = "2lSzmKUBtbnWulyFDr45UumQ7Pg7X96PPlobrXjECFM=",
                            Email = "tudec2020@gmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2023, 2, 27, 20, 51, 55, 32, DateTimeKind.Local).AddTicks(5735),
                            Ip = "N/A",
                            Nombre = "Auxiliar 2",
                            RolId = 3,
                            Salt = "qWXTQ7izTdauqGVF/Oawxg==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EComponenteLaboratorio", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EActividad", "Actividad")
                        .WithMany()
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EModuloComponente", "ModuloComponente")
                        .WithMany()
                        .HasForeignKey("ModuloComponenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EUpa", "Upa")
                        .WithMany()
                        .HasForeignKey("UpaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("ModuloComponente");

                    b.Navigation("Upa");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ELaboratorio", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EComponenteLaboratorio", "ComponenteLaboratorio")
                        .WithMany()
                        .HasForeignKey("ComponenteLaboratorioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComponenteLaboratorio");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EProtocoloCOM", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EUpa", "Upa")
                        .WithMany("ProtocolosCOM")
                        .HasForeignKey("UpaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Upa");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpaActividad", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EActividad", "Actividad")
                        .WithMany()
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EUpa", "Upa")
                        .WithMany()
                        .HasForeignKey("UpaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EUsuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("Upa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUsuario", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EEstadoUsuario", "EstadoUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.ERol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("lestoma.Entidades.Models.ETokensUsuarioByAplicacion", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<int>("AplicacionId")
                                .HasColumnType("integer")
                                .HasColumnName("aplicacion_id");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("fecha_creacion");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("text")
                                .HasColumnName("creado_por_ip");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("expiracion");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("text")
                                .HasColumnName("reeemplazado_por_token");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("fecha_revocacion");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("text")
                                .HasColumnName("revocado_por_ip");

                            b1.Property<string>("Token")
                                .HasColumnType("text")
                                .HasColumnName("token");

                            b1.Property<int>("usuario_id")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("usuario_id");

                            b1.ToTable("tokens_usuario_por_aplicacion", "seguridad");

                            b1.WithOwner()
                                .HasForeignKey("usuario_id");
                        });

                    b.Navigation("EstadoUsuario");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EEstadoUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ERol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpa", b =>
                {
                    b.Navigation("ProtocolosCOM");
                });
#pragma warning restore 612, 618
        }
    }
}
