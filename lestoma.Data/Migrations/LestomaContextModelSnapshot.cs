// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using lestoma.Data;

namespace lestoma.Data.Migrations
{
    [DbContext(typeof(LestomaContext))]
    partial class LestomaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("lestoma.Entidades.Models.EActividad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre_actividad");

                    b.Property<string>("Session")
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.ToTable("actividad", "superadmin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("240106f0-6882-4324-8fe1-f9e2e3bf739b"),
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 606, DateTimeKind.Local).AddTicks(3977),
                            Ip = "192.168.1.6",
                            Nombre = "control de agua",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("eadfbf7a-9dcb-478d-88bd-26355878b8a7"),
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 606, DateTimeKind.Local).AddTicks(4002),
                            Ip = "192.168.1.6",
                            Nombre = "alimentacion de peces",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EAplicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NombreAplicacion")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<short>("TiempoExpiracionToken")
                        .HasColumnType("smallint")
                        .HasColumnName("tiempo_expiracion_token");

                    b.HasKey("Id");

                    b.ToTable("aplicacion", "seguridad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreAplicacion = "App Movil",
                            TiempoExpiracionToken = (short)31
                        },
                        new
                        {
                            Id = 2,
                            NombreAplicacion = "Web",
                            TiempoExpiracionToken = (short)45
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EAuditoria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Accion")
                        .HasColumnType("text")
                        .HasColumnName("accion");

                    b.Property<string>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("PKTabla")
                        .HasColumnType("text")
                        .HasColumnName("pk");

                    b.Property<string>("Schema")
                        .HasColumnType("text")
                        .HasColumnName("schema");

                    b.Property<string>("Session")
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("Tabla")
                        .HasColumnType("text")
                        .HasColumnName("tabla");

                    b.Property<string>("TipoDeAplicacion")
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<string>("UsuarioBD")
                        .HasColumnType("text")
                        .HasColumnName("user_bd");

                    b.HasKey("Id");

                    b.ToTable("auditoria", "seguridad");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EBuzon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("jsonb")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Session")
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.ToTable("buzon", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EComponenteLaboratorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ActividadId")
                        .HasColumnType("uuid")
                        .HasColumnName("actividad_id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("JsonEstadoComponente")
                        .HasColumnType("jsonb")
                        .HasColumnName("descripcion_estado");

                    b.Property<Guid>("ModuloComponenteId")
                        .HasColumnType("uuid")
                        .HasColumnName("modulo_componente_id");

                    b.Property<string>("NombreComponente")
                        .HasColumnType("text")
                        .HasColumnName("nombre_componente");

                    b.Property<string>("Session")
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<Guid>("UpaId")
                        .HasColumnType("uuid")
                        .HasColumnName("upa_id");

                    b.HasKey("Id");

                    b.HasIndex("ActividadId");

                    b.HasIndex("ModuloComponenteId");

                    b.HasIndex("UpaId");

                    b.ToTable("componente_laboratorio", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d371d35-f20d-4115-9efc-d549ede92ee0"),
                            ActividadId = new Guid("eadfbf7a-9dcb-478d-88bd-26355878b8a7"),
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 625, DateTimeKind.Local).AddTicks(4516),
                            Ip = "192.168.1.6",
                            JsonEstadoComponente = "{\"Id\":\"c1d0a88e-3a5f-41e2-a1c2-4e1a7de34d42\",\"TipoEstado\":\"ON-OFF\",\"TercerByteTrama\":\"F0\",\"CuartoByteTrama\":\"00\"}",
                            ModuloComponenteId = new Guid("0ae66223-7d06-4578-b740-352912786240"),
                            NombreComponente = "BOMBA DE OXIGENO",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("fe089e47-6780-4f0f-8bca-f608e0cf740f")
                        },
                        new
                        {
                            Id = new Guid("6a89ec3e-61d7-4f61-a034-b89b43e457d5"),
                            ActividadId = new Guid("eadfbf7a-9dcb-478d-88bd-26355878b8a7"),
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 625, DateTimeKind.Local).AddTicks(4568),
                            Ip = "192.168.1.6",
                            JsonEstadoComponente = "{\"Id\":\"c1d0a88e-3a5f-41e2-a1c2-4e1a7de34d42\",\"TipoEstado\":\"ON-OFF\",\"TercerByteTrama\":\"F0\",\"CuartoByteTrama\":\"00\"}",
                            ModuloComponenteId = new Guid("0ae66223-7d06-4578-b740-352912786240"),
                            NombreComponente = "LUZ ESTANQUE",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("fe089e47-6780-4f0f-8bca-f608e0cf740f")
                        },
                        new
                        {
                            Id = new Guid("7c381c30-80d5-4093-8c31-d9f71395aea6"),
                            ActividadId = new Guid("eadfbf7a-9dcb-478d-88bd-26355878b8a7"),
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 625, DateTimeKind.Local).AddTicks(4574),
                            Ip = "192.168.1.6",
                            JsonEstadoComponente = "{\"Id\":\"c1d0a88e-3a5f-41e2-a1c2-4e1a7de34d42\",\"TipoEstado\":\"ON-OFF\",\"TercerByteTrama\":\"F0\",\"CuartoByteTrama\":\"00\"}",
                            ModuloComponenteId = new Guid("0ae66223-7d06-4578-b740-352912786240"),
                            NombreComponente = "DOSIFICADOR DE ALIMENTO",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("fe089e47-6780-4f0f-8bca-f608e0cf740f")
                        },
                        new
                        {
                            Id = new Guid("b13a7f2b-969e-4d1a-b786-a1dc47cc1423"),
                            ActividadId = new Guid("240106f0-6882-4324-8fe1-f9e2e3bf739b"),
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 625, DateTimeKind.Local).AddTicks(4577),
                            Ip = "192.168.1.6",
                            JsonEstadoComponente = "{\"Id\":\"e5af5e30-5683-4332-8015-48978a17b799\",\"TipoEstado\":\"LECTURA\",\"TercerByteTrama\":\"0F\",\"CuartoByteTrama\":\"00\"}",
                            ModuloComponenteId = new Guid("a1a443dd-4d80-4171-a5b7-aed140787af7"),
                            NombreComponente = "TEMPERATURA H2O",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("fe089e47-6780-4f0f-8bca-f608e0cf740f")
                        },
                        new
                        {
                            Id = new Guid("06326ac6-c21d-4189-9e4a-9681425b00d4"),
                            ActividadId = new Guid("240106f0-6882-4324-8fe1-f9e2e3bf739b"),
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 625, DateTimeKind.Local).AddTicks(4581),
                            Ip = "192.168.1.6",
                            JsonEstadoComponente = "{\"Id\":\"e5af5e30-5683-4332-8015-48978a17b799\",\"TipoEstado\":\"LECTURA\",\"TercerByteTrama\":\"0F\",\"CuartoByteTrama\":\"00\"}",
                            ModuloComponenteId = new Guid("a1a443dd-4d80-4171-a5b7-aed140787af7"),
                            NombreComponente = "PH",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("fe089e47-6780-4f0f-8bca-f608e0cf740f")
                        },
                        new
                        {
                            Id = new Guid("2155080c-83ea-4e75-b645-8956e2982446"),
                            ActividadId = new Guid("240106f0-6882-4324-8fe1-f9e2e3bf739b"),
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 625, DateTimeKind.Local).AddTicks(4584),
                            Ip = "192.168.1.6",
                            JsonEstadoComponente = "{\"Id\":\"e5af5e30-5683-4332-8015-48978a17b799\",\"TipoEstado\":\"LECTURA\",\"TercerByteTrama\":\"0F\",\"CuartoByteTrama\":\"00\"}",
                            ModuloComponenteId = new Guid("a1a443dd-4d80-4171-a5b7-aed140787af7"),
                            NombreComponente = "NIVEL TANQUE",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("fe089e47-6780-4f0f-8bca-f608e0cf740f")
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EEstadoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DescripcionEstado")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id");

                    b.ToTable("estado_usuario", "usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescripcionEstado = "verificar cuenta"
                        },
                        new
                        {
                            Id = 2,
                            DescripcionEstado = "Activado"
                        },
                        new
                        {
                            Id = 3,
                            DescripcionEstado = "Inactivo"
                        },
                        new
                        {
                            Id = 4,
                            DescripcionEstado = "Bloqueado"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ELaboratorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ComponenteLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("componente_laboratorio_id");

                    b.Property<bool>("EstadoInternet")
                        .HasColumnType("boolean")
                        .HasColumnName("estado_internet");

                    b.Property<DateTime>("FechaCreacionDispositivo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_dispositivo");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Session")
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<double?>("SetPoint")
                        .HasColumnType("double precision")
                        .HasColumnName("set_point");

                    b.Property<string>("TipoDeAplicacion")
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<int>("TipoDeComunicacionId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_com_id");

                    b.Property<string>("TramaEnviada")
                        .HasColumnType("text")
                        .HasColumnName("trama_enviada");

                    b.HasKey("Id");

                    b.HasIndex("ComponenteLaboratorioId");

                    b.HasIndex("TipoDeComunicacionId");

                    b.ToTable("detalle_laboratorio", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d338823-98a9-4dfe-b357-eadba3c07c17"),
                            ComponenteLaboratorioId = new Guid("5d371d35-f20d-4115-9efc-d549ede92ee0"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2022, 8, 25, 22, 46, 54, 625, DateTimeKind.Local).AddTicks(8327),
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 625, DateTimeKind.Local).AddTicks(8309),
                            Ip = "192.168.1.6",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TipoDeComunicacionId = 1,
                            TramaEnviada = "4901F000000000006180"
                        },
                        new
                        {
                            Id = new Guid("4c4432c3-ef57-40c1-8e0b-7bd7d3834ab4"),
                            ComponenteLaboratorioId = new Guid("6a89ec3e-61d7-4f61-a034-b89b43e457d5"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2022, 8, 25, 22, 46, 54, 625, DateTimeKind.Local).AddTicks(9909),
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 625, DateTimeKind.Local).AddTicks(9898),
                            Ip = "192.168.1.6",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TipoDeComunicacionId = 2,
                            TramaEnviada = "6F01F000000000005302"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EModuloComponente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre_modulo");

                    b.Property<string>("Session")
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.ToTable("modulo_componente", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ae66223-7d06-4578-b740-352912786240"),
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 576, DateTimeKind.Local).AddTicks(6321),
                            Ip = "192.168.1.6",
                            Nombre = "ACTUADORES",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("a1a443dd-4d80-4171-a5b7-aed140787af7"),
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 578, DateTimeKind.Local).AddTicks(2722),
                            Ip = "192.168.1.6",
                            Nombre = "SENSORES",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EProtocoloCOM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("PrimerByteTrama")
                        .HasColumnType("text")
                        .HasColumnName("primer_byte_trama");

                    b.Property<string>("Sigla")
                        .HasColumnType("text")
                        .HasColumnName("sigla");

                    b.HasKey("Id");

                    b.ToTable("protocolo_com", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Peer to Peer",
                            PrimerByteTrama = "49",
                            Sigla = "PP"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Broad Cast",
                            PrimerByteTrama = "6F",
                            Sigla = "BS"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ERol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_rol");

                    b.HasKey("Id");

                    b.ToTable("rol", "usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreRol = "Super Administrador"
                        },
                        new
                        {
                            Id = 2,
                            NombreRol = "Administrador"
                        },
                        new
                        {
                            Id = 3,
                            NombreRol = "Auxiliar"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ESuperAdministrador", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("UsuarioId")
                        .HasColumnType("smallint")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.ToTable("super_administrador", "superadmin");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            UsuarioId = (short)1
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<short>("CantidadActividades")
                        .HasColumnType("smallint")
                        .HasColumnName("cantidad_actividades");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre_upa");

                    b.Property<string>("Session")
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<int>("SuperAdminId")
                        .HasColumnType("integer")
                        .HasColumnName("superadmin_id");

                    b.Property<string>("TipoDeAplicacion")
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.ToTable("upa", "superadmin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe089e47-6780-4f0f-8bca-f608e0cf740f"),
                            CantidadActividades = (short)5,
                            Descripcion = "queda ubicada en facatativá",
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 606, DateTimeKind.Local).AddTicks(1247),
                            Ip = "192.168.1.6",
                            Nombre = "finca el vergel",
                            Session = "Anonimo",
                            SuperAdminId = 1,
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("18f736ab-ce68-4d88-a0d1-ef05dcbc140f"),
                            CantidadActividades = (short)2,
                            Descripcion = "queda ubicada en la universidad cundinamarca extensión nfaca",
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 606, DateTimeKind.Local).AddTicks(1282),
                            Ip = "192.168.1.6",
                            Nombre = "ucundinamarca",
                            Session = "Anonimo",
                            SuperAdminId = 1,
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpaActividad", b =>
                {
                    b.Property<Guid>("UpaId")
                        .HasColumnType("uuid")
                        .HasColumnName("upa_id");

                    b.Property<Guid>("ActividadId")
                        .HasColumnType("uuid")
                        .HasColumnName("actividad_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Session")
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("UpaId", "ActividadId", "UsuarioId");

                    b.HasIndex("ActividadId");

                    b.ToTable("upa_actividad", "superadmin");

                    b.HasData(
                        new
                        {
                            UpaId = new Guid("fe089e47-6780-4f0f-8bca-f608e0cf740f"),
                            ActividadId = new Guid("240106f0-6882-4324-8fe1-f9e2e3bf739b"),
                            UsuarioId = 2,
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 606, DateTimeKind.Local).AddTicks(7892),
                            Ip = "192.168.1.6",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("fe089e47-6780-4f0f-8bca-f608e0cf740f"),
                            ActividadId = new Guid("eadfbf7a-9dcb-478d-88bd-26355878b8a7"),
                            UsuarioId = 2,
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 606, DateTimeKind.Local).AddTicks(7908),
                            Ip = "192.168.1.6",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("fe089e47-6780-4f0f-8bca-f608e0cf740f"),
                            ActividadId = new Guid("240106f0-6882-4324-8fe1-f9e2e3bf739b"),
                            UsuarioId = 3,
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 606, DateTimeKind.Local).AddTicks(7910),
                            Ip = "192.168.1.6",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("fe089e47-6780-4f0f-8bca-f608e0cf740f"),
                            ActividadId = new Guid("eadfbf7a-9dcb-478d-88bd-26355878b8a7"),
                            UsuarioId = 3,
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 606, DateTimeKind.Local).AddTicks(7912),
                            Ip = "192.168.1.6",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("18f736ab-ce68-4d88-a0d1-ef05dcbc140f"),
                            ActividadId = new Guid("240106f0-6882-4324-8fe1-f9e2e3bf739b"),
                            UsuarioId = 4,
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 606, DateTimeKind.Local).AddTicks(7915),
                            Ip = "192.168.1.6",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("18f736ab-ce68-4d88-a0d1-ef05dcbc140f"),
                            ActividadId = new Guid("eadfbf7a-9dcb-478d-88bd-26355878b8a7"),
                            UsuarioId = 4,
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 606, DateTimeKind.Local).AddTicks(7917),
                            Ip = "192.168.1.6",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apellido")
                        .HasColumnType("text")
                        .HasColumnName("apellido");

                    b.Property<string>("Clave")
                        .HasColumnType("text")
                        .HasColumnName("clave");

                    b.Property<string>("CodigoRecuperacion")
                        .HasColumnType("text")
                        .HasColumnName("codigo_recuperacion");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("estado_id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<DateTime?>("FechaVencimientoCodigo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("vencimiento_codigo_recuperacion");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<int>("RolId")
                        .HasColumnType("integer")
                        .HasColumnName("rol_id");

                    b.Property<string>("Salt")
                        .HasColumnType("text")
                        .HasColumnName("semilla");

                    b.Property<string>("Session")
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("RolId");

                    b.ToTable("usuario", "usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "Lestoma",
                            Clave = "P8aY6NNrvS9qN4U3JUbXUjKMnT3xJqSNHkapHz0NSIs=",
                            Email = "diegop177@hotmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 590, DateTimeKind.Local).AddTicks(2707),
                            Ip = "192.168.1.6",
                            Nombre = "Super Admin",
                            RolId = 1,
                            Salt = "qHOuN/KuGBcjfqTdV93Oog==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "Lestoma",
                            Clave = "vPBqYJqiJSmToTIgC9i6LyAvwYcR9jGqU4Hy6PPhA3k=",
                            Email = "diegoarturo1598@hotmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 598, DateTimeKind.Local).AddTicks(83),
                            Ip = "192.168.1.6",
                            Nombre = "Administrador",
                            RolId = 2,
                            Salt = "QIwPzUlZ2tsLXYphpxC4rg==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "Lestoma",
                            Clave = "dRE/4IcCXKZwn4LVcRZKoPCs3z3gu8FglDYB9m8S7yE=",
                            Email = "programadoresuc@outlook.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 605, DateTimeKind.Local).AddTicks(2399),
                            Ip = "192.168.1.6",
                            Nombre = "Auxiliar 1",
                            RolId = 3,
                            Salt = "UTqrlysx1CFGM2EE20ec3w==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 4,
                            Apellido = "Lestoma",
                            Clave = "dRE/4IcCXKZwn4LVcRZKoPCs3z3gu8FglDYB9m8S7yE=",
                            Email = "auxiliar2@gmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2022, 8, 25, 22, 46, 54, 605, DateTimeKind.Local).AddTicks(2428),
                            Ip = "192.168.1.6",
                            Nombre = "Auxiliar 2",
                            RolId = 3,
                            Salt = "UTqrlysx1CFGM2EE20ec3w==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EAlimentarPeces", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("alimentar_peces", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EControlAgua", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("control_de_agua", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EControlElectrico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("control_electrico", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EControlEntorno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("control_de_entorno", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EControlHidroponico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("control_hidroponico", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.ERecirculacionAgua", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("recirculacion_de_agua", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EComponenteLaboratorio", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EActividad", "Actividad")
                        .WithMany()
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EModuloComponente", "ModuloComponente")
                        .WithMany()
                        .HasForeignKey("ModuloComponenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EUpa", "Upa")
                        .WithMany()
                        .HasForeignKey("UpaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("ModuloComponente");

                    b.Navigation("Upa");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ELaboratorio", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EComponenteLaboratorio", "ComponenteLaboratorio")
                        .WithMany()
                        .HasForeignKey("ComponenteLaboratorioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EProtocoloCOM", "TipoDeComunicacion")
                        .WithMany()
                        .HasForeignKey("TipoDeComunicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponenteLaboratorio");

                    b.Navigation("TipoDeComunicacion");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpaActividad", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EActividad", "Actividad")
                        .WithMany()
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EUpa", "Upa")
                        .WithMany()
                        .HasForeignKey("UpaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("Upa");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUsuario", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EEstadoUsuario", "EstadoUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.ERol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("lestoma.Entidades.Models.ETokensUsuarioByAplicacion", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<int>("AplicacionId")
                                .HasColumnType("integer")
                                .HasColumnName("aplicacion_id");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("fecha_creacion");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("text")
                                .HasColumnName("creado_por_ip");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("expiracion");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("text")
                                .HasColumnName("reeemplazado_por_token");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("fecha_revocacion");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("text")
                                .HasColumnName("revocado_por_ip");

                            b1.Property<string>("Token")
                                .HasColumnType("text")
                                .HasColumnName("token");

                            b1.Property<int>("usuario_id")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("usuario_id");

                            b1.ToTable("tokens_usuario_por_aplicacion", "seguridad");

                            b1.WithOwner()
                                .HasForeignKey("usuario_id");
                        });

                    b.Navigation("EstadoUsuario");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EEstadoUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ERol", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
