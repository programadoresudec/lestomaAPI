// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using lestoma.Data;

namespace lestoma.Data.Migrations
{
    [DbContext(typeof(LestomaContext))]
    partial class LestomaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("lestoma.Entidades.Models.EActividad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_actividad");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.ToTable("actividad", "superadmin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("767f6153-1f32-4bff-bc91-78ee96666691"),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 590, DateTimeKind.Local).AddTicks(5225),
                            Ip = "10.201.240.243",
                            Nombre = "control de agua",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("06b110dc-51d7-474c-85c0-e0e03a237ef7"),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 590, DateTimeKind.Local).AddTicks(5245),
                            Ip = "10.201.240.243",
                            Nombre = "alimentacion de peces",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EAplicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NombreAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<short>("TiempoExpiracionToken")
                        .HasColumnType("smallint")
                        .HasColumnName("tiempo_expiracion_token");

                    b.HasKey("Id");

                    b.ToTable("aplicacion", "seguridad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreAplicacion = "App Movil",
                            TiempoExpiracionToken = (short)31
                        },
                        new
                        {
                            Id = 2,
                            NombreAplicacion = "Web",
                            TiempoExpiracionToken = (short)45
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EAuditoria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Accion")
                        .HasColumnType("text")
                        .HasColumnName("accion");

                    b.Property<string>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("PKTabla")
                        .HasColumnType("text")
                        .HasColumnName("pk");

                    b.Property<string>("Schema")
                        .HasColumnType("text")
                        .HasColumnName("schema");

                    b.Property<string>("Session")
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("Tabla")
                        .HasColumnType("text")
                        .HasColumnName("tabla");

                    b.Property<string>("TipoDeAplicacion")
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<string>("UsuarioBD")
                        .HasColumnType("text")
                        .HasColumnName("user_bd");

                    b.HasKey("Id");

                    b.ToTable("auditoria", "seguridad");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EBuzon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.ToTable("buzon", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EComponenteLaboratorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ActividadId")
                        .HasColumnType("uuid")
                        .HasColumnName("actividad_id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("JsonEstadoComponente")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("descripcion_estado");

                    b.Property<Guid>("ModuloComponenteId")
                        .HasColumnType("uuid")
                        .HasColumnName("modulo_componente_id");

                    b.Property<string>("NombreComponente")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_componente");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<Guid>("UpaId")
                        .HasColumnType("uuid")
                        .HasColumnName("upa_id");

                    b.HasKey("Id");

                    b.HasIndex("ActividadId");

                    b.HasIndex("ModuloComponenteId");

                    b.HasIndex("UpaId");

                    b.ToTable("componente_laboratorio", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5b4d156-ffa1-4bc1-840e-12dcebf0c674"),
                            ActividadId = new Guid("06b110dc-51d7-474c-85c0-e0e03a237ef7"),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(1968),
                            Ip = "10.201.240.243",
                            JsonEstadoComponente = "{\"Id\":\"98a74bd5-7390-4244-8b2e-255d3707071d\",\"TipoEstado\":\"ON-OFF\",\"ByteFuncion\":\"F0\"}",
                            ModuloComponenteId = new Guid("d3e33310-61ce-4ac2-90c1-c4286631a0f7"),
                            NombreComponente = "BOMBA DE OXIGENO",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("a0dc4b17-ff25-4fc5-b687-1b23cef12ce0")
                        },
                        new
                        {
                            Id = new Guid("12eb8005-3487-451c-9edb-4bc90a946f32"),
                            ActividadId = new Guid("06b110dc-51d7-474c-85c0-e0e03a237ef7"),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(2108),
                            Ip = "10.201.240.243",
                            JsonEstadoComponente = "{\"Id\":\"98a74bd5-7390-4244-8b2e-255d3707071d\",\"TipoEstado\":\"ON-OFF\",\"ByteFuncion\":\"F0\"}",
                            ModuloComponenteId = new Guid("d3e33310-61ce-4ac2-90c1-c4286631a0f7"),
                            NombreComponente = "LUZ ESTANQUE",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("a0dc4b17-ff25-4fc5-b687-1b23cef12ce0")
                        },
                        new
                        {
                            Id = new Guid("38f5aa9e-e090-45fa-b910-4168ba1d1357"),
                            ActividadId = new Guid("06b110dc-51d7-474c-85c0-e0e03a237ef7"),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(2115),
                            Ip = "10.201.240.243",
                            JsonEstadoComponente = "{\"Id\":\"98a74bd5-7390-4244-8b2e-255d3707071d\",\"TipoEstado\":\"ON-OFF\",\"ByteFuncion\":\"F0\"}",
                            ModuloComponenteId = new Guid("d3e33310-61ce-4ac2-90c1-c4286631a0f7"),
                            NombreComponente = "DOSIFICADOR DE ALIMENTO",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("a0dc4b17-ff25-4fc5-b687-1b23cef12ce0")
                        },
                        new
                        {
                            Id = new Guid("8f27b34e-a81f-4c10-b502-ebefc9a88e5c"),
                            ActividadId = new Guid("767f6153-1f32-4bff-bc91-78ee96666691"),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(2120),
                            Ip = "10.201.240.243",
                            JsonEstadoComponente = "{\"Id\":\"f5f738c7-0dba-48ee-afea-b22530160653\",\"TipoEstado\":\"LECTURA\",\"ByteFuncion\":\"0F\"}",
                            ModuloComponenteId = new Guid("b2ba13fa-d96f-495b-b1a3-f42eb7b32796"),
                            NombreComponente = "TEMPERATURA H2O",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("a0dc4b17-ff25-4fc5-b687-1b23cef12ce0")
                        },
                        new
                        {
                            Id = new Guid("c3138870-41b0-4f5e-a791-5dcc710e935a"),
                            ActividadId = new Guid("767f6153-1f32-4bff-bc91-78ee96666691"),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(2123),
                            Ip = "10.201.240.243",
                            JsonEstadoComponente = "{\"Id\":\"f5f738c7-0dba-48ee-afea-b22530160653\",\"TipoEstado\":\"LECTURA\",\"ByteFuncion\":\"0F\"}",
                            ModuloComponenteId = new Guid("b2ba13fa-d96f-495b-b1a3-f42eb7b32796"),
                            NombreComponente = "PH",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("a0dc4b17-ff25-4fc5-b687-1b23cef12ce0")
                        },
                        new
                        {
                            Id = new Guid("97101379-3f44-4eb0-913f-2c262a4fe745"),
                            ActividadId = new Guid("767f6153-1f32-4bff-bc91-78ee96666691"),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(2126),
                            Ip = "10.201.240.243",
                            JsonEstadoComponente = "{\"Id\":\"f5f738c7-0dba-48ee-afea-b22530160653\",\"TipoEstado\":\"LECTURA\",\"ByteFuncion\":\"0F\"}",
                            ModuloComponenteId = new Guid("b2ba13fa-d96f-495b-b1a3-f42eb7b32796"),
                            NombreComponente = "NIVEL TANQUE",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("a0dc4b17-ff25-4fc5-b687-1b23cef12ce0")
                        },
                        new
                        {
                            Id = new Guid("4144685c-7349-4bac-876a-d8d94e49ed69"),
                            ActividadId = new Guid("767f6153-1f32-4bff-bc91-78ee96666691"),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(2130),
                            Ip = "10.201.240.243",
                            JsonEstadoComponente = "{\"Id\":\"c781773b-7d7c-47f7-b5d0-34a4943ba907\",\"TipoEstado\":\"AJUSTE\",\"ByteFuncion\":\"F0\"}",
                            ModuloComponenteId = new Guid("33d6e193-2fbe-4118-882f-c002183d4aa2"),
                            NombreComponente = "SP_TEMPERATURA H2O",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("a0dc4b17-ff25-4fc5-b687-1b23cef12ce0")
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EEstadoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DescripcionEstado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id");

                    b.ToTable("estado_usuario", "usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescripcionEstado = "verificar cuenta"
                        },
                        new
                        {
                            Id = 2,
                            DescripcionEstado = "Activado"
                        },
                        new
                        {
                            Id = 3,
                            DescripcionEstado = "Inactivo"
                        },
                        new
                        {
                            Id = 4,
                            DescripcionEstado = "Bloqueado"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ELaboratorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ComponenteLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("componente_laboratorio_id");

                    b.Property<bool>("EstadoInternet")
                        .HasColumnType("boolean")
                        .HasColumnName("estado_internet");

                    b.Property<DateTime>("FechaCreacionDispositivo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_dispositivo");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<int>("TipoDeComunicacionId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_com_id");

                    b.Property<string>("TramaEnviada")
                        .HasColumnType("text")
                        .HasColumnName("trama_enviada");

                    b.Property<string>("TramaRecibida")
                        .HasColumnType("text")
                        .HasColumnName("trama_recibida");

                    b.Property<double?>("ValorCalculadoTramaEnviada")
                        .HasColumnType("double precision")
                        .HasColumnName("dato_trama_enviada");

                    b.Property<double?>("ValorCalculadoTramaRecibida")
                        .HasColumnType("double precision")
                        .HasColumnName("dato_trama_recibida");

                    b.HasKey("Id");

                    b.HasIndex("ComponenteLaboratorioId");

                    b.HasIndex("TipoDeComunicacionId");

                    b.ToTable("detalle_laboratorio", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b3dd5a2-73e2-4004-9191-2959fe41435f"),
                            ComponenteLaboratorioId = new Guid("c5b4d156-ffa1-4bc1-840e-12dcebf0c674"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(7140),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(5949),
                            Ip = "10.201.240.243",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TipoDeComunicacionId = 1,
                            TramaEnviada = "6FDAF029000000009834",
                            TramaRecibida = "49803CE33F8000008FC8",
                            ValorCalculadoTramaRecibida = 1.0
                        },
                        new
                        {
                            Id = new Guid("3fa00e14-22ce-4cb0-bd70-a260c2f94c00"),
                            ComponenteLaboratorioId = new Guid("12eb8005-3487-451c-9edb-4bc90a946f32"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(8902),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(8892),
                            Ip = "10.201.240.243",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TipoDeComunicacionId = 2,
                            TramaEnviada = "495DF08E000000007B74",
                            TramaRecibida = "496D3C083F80000096D1",
                            ValorCalculadoTramaRecibida = 1.0
                        },
                        new
                        {
                            Id = new Guid("4ccf1912-580e-4e31-8173-6a71417f31eb"),
                            ComponenteLaboratorioId = new Guid("c3138870-41b0-4f5e-a791-5dcc710e935a"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(8910),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(8909),
                            Ip = "10.201.240.243",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TipoDeComunicacionId = 1,
                            TramaEnviada = "493E0FA6000000007453",
                            TramaRecibida = "6FB2F0DC410E66663E8F",
                            ValorCalculadoTramaRecibida = 8.9000000000000004
                        },
                        new
                        {
                            Id = new Guid("42677cc4-d78a-4c3a-a049-d574f52c4da4"),
                            ComponenteLaboratorioId = new Guid("c3138870-41b0-4f5e-a791-5dcc710e935a"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(8915),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(8913),
                            Ip = "10.201.240.243",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TipoDeComunicacionId = 1,
                            TramaEnviada = "493E0FA6000000007453",
                            TramaRecibida = "6FEFF08440D66666F1A3",
                            ValorCalculadoTramaRecibida = 6.7000000000000002
                        },
                        new
                        {
                            Id = new Guid("fe8b1d01-5e88-4974-86db-9e4475d64e61"),
                            ComponenteLaboratorioId = new Guid("4144685c-7349-4bac-876a-d8d94e49ed69"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(9358),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 705, DateTimeKind.Local).AddTicks(9349),
                            Ip = "10.201.240.243",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TipoDeComunicacionId = 1,
                            TramaEnviada = "49F2F04541C00000A19A",
                            TramaRecibida = "6FEEF0D8434800001CA9",
                            ValorCalculadoTramaEnviada = 24.0,
                            ValorCalculadoTramaRecibida = 200.0
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EModuloComponente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_modulo");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.ToTable("modulo_componente", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3e33310-61ce-4ac2-90c1-c4286631a0f7"),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 547, DateTimeKind.Local).AddTicks(3042),
                            Ip = "10.201.240.243",
                            Nombre = "ACTUADORES",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("b2ba13fa-d96f-495b-b1a3-f42eb7b32796"),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 547, DateTimeKind.Local).AddTicks(4582),
                            Ip = "10.201.240.243",
                            Nombre = "SENSORES",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("33d6e193-2fbe-4118-882f-c002183d4aa2"),
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 547, DateTimeKind.Local).AddTicks(4593),
                            Ip = "10.201.240.243",
                            Nombre = "SET_POINT/CONTROL",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EProtocoloCOM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("PrimerByteTrama")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("primer_byte_trama");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("sigla");

                    b.HasKey("Id");

                    b.ToTable("protocolo_com", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Peer to Peer",
                            PrimerByteTrama = "49",
                            Sigla = "PP"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Broad Cast",
                            PrimerByteTrama = "6F",
                            Sigla = "BS"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ERol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_rol");

                    b.HasKey("Id");

                    b.ToTable("rol", "usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreRol = "Super Administrador"
                        },
                        new
                        {
                            Id = 2,
                            NombreRol = "Administrador"
                        },
                        new
                        {
                            Id = 3,
                            NombreRol = "Auxiliar"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ESuperAdministrador", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("UsuarioId")
                        .HasColumnType("smallint")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.ToTable("super_administrador", "superadmin");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            UsuarioId = (short)1
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<short>("CantidadActividades")
                        .HasColumnType("smallint")
                        .HasColumnName("cantidad_actividades");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_upa");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<int>("SuperAdminId")
                        .HasColumnType("integer")
                        .HasColumnName("superadmin_id");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.ToTable("upa", "superadmin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0dc4b17-ff25-4fc5-b687-1b23cef12ce0"),
                            CantidadActividades = (short)5,
                            Descripcion = "queda ubicada en facatativá",
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 590, DateTimeKind.Local).AddTicks(3359),
                            Ip = "10.201.240.243",
                            Nombre = "finca el vergel",
                            Session = "Anonimo",
                            SuperAdminId = 1,
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("e33757f8-ab9a-4143-82c5-ff3ed987e681"),
                            CantidadActividades = (short)2,
                            Descripcion = "queda ubicada en la universidad cundinamarca extensión nfaca",
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 590, DateTimeKind.Local).AddTicks(3382),
                            Ip = "10.201.240.243",
                            Nombre = "ucundinamarca",
                            Session = "Anonimo",
                            SuperAdminId = 1,
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpaActividad", b =>
                {
                    b.Property<Guid>("UpaId")
                        .HasColumnType("uuid")
                        .HasColumnName("upa_id");

                    b.Property<Guid>("ActividadId")
                        .HasColumnType("uuid")
                        .HasColumnName("actividad_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("UpaId", "ActividadId", "UsuarioId");

                    b.HasIndex("ActividadId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("upa_actividad", "superadmin");

                    b.HasData(
                        new
                        {
                            UpaId = new Guid("a0dc4b17-ff25-4fc5-b687-1b23cef12ce0"),
                            ActividadId = new Guid("767f6153-1f32-4bff-bc91-78ee96666691"),
                            UsuarioId = 2,
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 590, DateTimeKind.Local).AddTicks(8736),
                            Ip = "10.201.240.243",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("a0dc4b17-ff25-4fc5-b687-1b23cef12ce0"),
                            ActividadId = new Guid("06b110dc-51d7-474c-85c0-e0e03a237ef7"),
                            UsuarioId = 2,
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 590, DateTimeKind.Local).AddTicks(8869),
                            Ip = "10.201.240.243",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("a0dc4b17-ff25-4fc5-b687-1b23cef12ce0"),
                            ActividadId = new Guid("767f6153-1f32-4bff-bc91-78ee96666691"),
                            UsuarioId = 3,
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 590, DateTimeKind.Local).AddTicks(8875),
                            Ip = "10.201.240.243",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("a0dc4b17-ff25-4fc5-b687-1b23cef12ce0"),
                            ActividadId = new Guid("06b110dc-51d7-474c-85c0-e0e03a237ef7"),
                            UsuarioId = 3,
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 590, DateTimeKind.Local).AddTicks(8877),
                            Ip = "10.201.240.243",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("e33757f8-ab9a-4143-82c5-ff3ed987e681"),
                            ActividadId = new Guid("767f6153-1f32-4bff-bc91-78ee96666691"),
                            UsuarioId = 4,
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 590, DateTimeKind.Local).AddTicks(8880),
                            Ip = "10.201.240.243",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("e33757f8-ab9a-4143-82c5-ff3ed987e681"),
                            ActividadId = new Guid("06b110dc-51d7-474c-85c0-e0e03a237ef7"),
                            UsuarioId = 4,
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 590, DateTimeKind.Local).AddTicks(8882),
                            Ip = "10.201.240.243",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("clave");

                    b.Property<string>("CodigoRecuperacion")
                        .HasColumnType("text")
                        .HasColumnName("codigo_recuperacion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("estado_id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<DateTime?>("FechaVencimientoCodigo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("vencimiento_codigo_recuperacion");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<int>("RolId")
                        .HasColumnType("integer")
                        .HasColumnName("rol_id");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("semilla");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("RolId");

                    b.ToTable("usuario", "usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "Lestoma",
                            Clave = "FMTdH4GAJiDffypi7wCq840EYtGeuw3/CT0EOZz7FHw=",
                            Email = "diegop177@hotmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 575, DateTimeKind.Local).AddTicks(2979),
                            Ip = "10.201.240.243",
                            Nombre = "Super Admin",
                            RolId = 1,
                            Salt = "Ka6/7yd7UYQ/dv+da2OL2Q==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "Lestoma",
                            Clave = "iZfYdY0T7CeB/M4kZ3VuoG4qc37iX16x/Cqm8lzNTAU=",
                            Email = "diegoarturo1598@hotmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 582, DateTimeKind.Local).AddTicks(8656),
                            Ip = "10.201.240.243",
                            Nombre = "Administrador",
                            RolId = 2,
                            Salt = "fpW+3+hEHJykTMx0T3KEOw==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "Lestoma",
                            Clave = "ljEhaEXbLX2VGgzr2PdHiCQmO0/iPzWYJGMfHcZSqmI=",
                            Email = "programadoresuc@outlook.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 589, DateTimeKind.Local).AddTicks(6737),
                            Ip = "10.201.240.243",
                            Nombre = "Auxiliar 1",
                            RolId = 3,
                            Salt = "1giJOaKKcfoYyXBo0Fo5Gg==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 4,
                            Apellido = "Lestoma",
                            Clave = "ljEhaEXbLX2VGgzr2PdHiCQmO0/iPzWYJGMfHcZSqmI=",
                            Email = "auxiliar2@gmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2022, 11, 17, 16, 12, 4, 589, DateTimeKind.Local).AddTicks(6746),
                            Ip = "10.201.240.243",
                            Nombre = "Auxiliar 2",
                            RolId = 3,
                            Salt = "1giJOaKKcfoYyXBo0Fo5Gg==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EAlimentarPeces", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("alimentar_peces", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EControlAgua", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("control_de_agua", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EControlElectrico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("control_electrico", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EControlEntorno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("control_de_entorno", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EControlHidroponico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("control_hidroponico", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.ERecirculacionAgua", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("recirculacion_de_agua", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EComponenteLaboratorio", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EActividad", "Actividad")
                        .WithMany()
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EModuloComponente", "ModuloComponente")
                        .WithMany()
                        .HasForeignKey("ModuloComponenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EUpa", "Upa")
                        .WithMany()
                        .HasForeignKey("UpaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("ModuloComponente");

                    b.Navigation("Upa");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ELaboratorio", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EComponenteLaboratorio", "ComponenteLaboratorio")
                        .WithMany()
                        .HasForeignKey("ComponenteLaboratorioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EProtocoloCOM", "TipoDeComunicacion")
                        .WithMany()
                        .HasForeignKey("TipoDeComunicacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComponenteLaboratorio");

                    b.Navigation("TipoDeComunicacion");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpaActividad", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EActividad", "Actividad")
                        .WithMany()
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EUpa", "Upa")
                        .WithMany()
                        .HasForeignKey("UpaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EUsuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("Upa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUsuario", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EEstadoUsuario", "EstadoUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.ERol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("lestoma.Entidades.Models.ETokensUsuarioByAplicacion", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<int>("AplicacionId")
                                .HasColumnType("integer")
                                .HasColumnName("aplicacion_id");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("fecha_creacion");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("text")
                                .HasColumnName("creado_por_ip");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("expiracion");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("text")
                                .HasColumnName("reeemplazado_por_token");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("fecha_revocacion");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("text")
                                .HasColumnName("revocado_por_ip");

                            b1.Property<string>("Token")
                                .HasColumnType("text")
                                .HasColumnName("token");

                            b1.Property<int>("usuario_id")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("usuario_id");

                            b1.ToTable("tokens_usuario_por_aplicacion", "seguridad");

                            b1.WithOwner()
                                .HasForeignKey("usuario_id");
                        });

                    b.Navigation("EstadoUsuario");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EEstadoUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ERol", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
