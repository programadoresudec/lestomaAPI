// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using lestoma.Data;

namespace lestoma.Data.Migrations
{
    [DbContext(typeof(LestomaContext))]
    partial class LestomaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("lestoma.Entidades.Models.EActividad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_actividad");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.ToTable("actividad", "superadmin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a457d4bd-3921-4a22-8d77-6d895de743c3"),
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 565, DateTimeKind.Local).AddTicks(513),
                            Ip = "N/A",
                            Nombre = "control de agua",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("9d229436-a9c7-4849-a840-055af0c2b5a9"),
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 565, DateTimeKind.Local).AddTicks(567),
                            Ip = "N/A",
                            Nombre = "alimentacion de peces",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EAplicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NombreAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<short>("TiempoExpiracionToken")
                        .HasColumnType("smallint")
                        .HasColumnName("tiempo_expiracion_token");

                    b.HasKey("Id");

                    b.ToTable("aplicacion", "seguridad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreAplicacion = "App Movil",
                            TiempoExpiracionToken = (short)31
                        },
                        new
                        {
                            Id = 2,
                            NombreAplicacion = "Web",
                            TiempoExpiracionToken = (short)45
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EAuditoria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Accion")
                        .HasColumnType("text")
                        .HasColumnName("accion");

                    b.Property<string>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("PKTabla")
                        .HasColumnType("text")
                        .HasColumnName("pk");

                    b.Property<string>("Schema")
                        .HasColumnType("text")
                        .HasColumnName("schema");

                    b.Property<string>("Session")
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("Tabla")
                        .HasColumnType("text")
                        .HasColumnName("tabla");

                    b.Property<string>("TipoDeAplicacion")
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<string>("UsuarioBD")
                        .HasColumnType("text")
                        .HasColumnName("user_bd");

                    b.HasKey("Id");

                    b.ToTable("auditoria", "seguridad");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EBuzon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.ToTable("buzon", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EComponenteLaboratorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ActividadId")
                        .HasColumnType("uuid")
                        .HasColumnName("actividad_id");

                    b.Property<byte>("DireccionRegistro")
                        .HasColumnType("smallint")
                        .HasColumnName("direccion_registro");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("JsonEstadoComponente")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("descripcion_estado");

                    b.Property<Guid>("ModuloComponenteId")
                        .HasColumnType("uuid")
                        .HasColumnName("modulo_componente_id");

                    b.Property<string>("NombreComponente")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_componente");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<Guid>("UpaId")
                        .HasColumnType("uuid")
                        .HasColumnName("upa_id");

                    b.HasKey("Id");

                    b.HasIndex("ActividadId");

                    b.HasIndex("ModuloComponenteId");

                    b.HasIndex("UpaId");

                    b.ToTable("componente_laboratorio", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = new Guid("003bbddd-22fa-468e-b0c8-b66ac1586cd4"),
                            ActividadId = new Guid("9d229436-a9c7-4849-a840-055af0c2b5a9"),
                            DireccionRegistro = (byte)0,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 700, DateTimeKind.Local).AddTicks(1799),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\"Id\":\"98a74bd5-7390-4244-8b2e-255d3707071d\",\"TipoEstado\":\"ON-OFF\",\"ByteHexaFuncion\":\"F0\",\"ByteDecimalFuncion\":240}",
                            ModuloComponenteId = new Guid("f7af0026-c029-4b24-b465-8e9f889ac9b8"),
                            NombreComponente = "BOMBA DE OXIGENO",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82")
                        },
                        new
                        {
                            Id = new Guid("b7f743f6-6bfd-4aba-bfdf-e64bc5575ee9"),
                            ActividadId = new Guid("9d229436-a9c7-4849-a840-055af0c2b5a9"),
                            DireccionRegistro = (byte)1,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 700, DateTimeKind.Local).AddTicks(2238),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\"Id\":\"98a74bd5-7390-4244-8b2e-255d3707071d\",\"TipoEstado\":\"ON-OFF\",\"ByteHexaFuncion\":\"F0\",\"ByteDecimalFuncion\":240}",
                            ModuloComponenteId = new Guid("f7af0026-c029-4b24-b465-8e9f889ac9b8"),
                            NombreComponente = "LUZ ESTANQUE",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82")
                        },
                        new
                        {
                            Id = new Guid("05bc358d-92ef-46a8-9588-918275f3a5ba"),
                            ActividadId = new Guid("9d229436-a9c7-4849-a840-055af0c2b5a9"),
                            DireccionRegistro = (byte)3,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 701, DateTimeKind.Local).AddTicks(4121),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\"Id\":\"98a74bd5-7390-4244-8b2e-255d3707071d\",\"TipoEstado\":\"ON-OFF\",\"ByteHexaFuncion\":\"F0\",\"ByteDecimalFuncion\":240}",
                            ModuloComponenteId = new Guid("f7af0026-c029-4b24-b465-8e9f889ac9b8"),
                            NombreComponente = "DOSIFICADOR DE ALIMENTO",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82")
                        },
                        new
                        {
                            Id = new Guid("100b0b78-1454-4034-b595-fc3099029e15"),
                            ActividadId = new Guid("a457d4bd-3921-4a22-8d77-6d895de743c3"),
                            DireccionRegistro = (byte)2,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 701, DateTimeKind.Local).AddTicks(4147),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\"Id\":\"f5f738c7-0dba-48ee-afea-b22530160653\",\"TipoEstado\":\"LECTURA\",\"ByteHexaFuncion\":\"0F\",\"ByteDecimalFuncion\":15}",
                            ModuloComponenteId = new Guid("a0891542-c300-486e-b6e8-7f544804ba1b"),
                            NombreComponente = "TEMPERATURA H2O",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82")
                        },
                        new
                        {
                            Id = new Guid("2fb34f39-a4d5-446d-8dc8-f4fd71587ad8"),
                            ActividadId = new Guid("a457d4bd-3921-4a22-8d77-6d895de743c3"),
                            DireccionRegistro = (byte)0,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 701, DateTimeKind.Local).AddTicks(4157),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\"Id\":\"f5f738c7-0dba-48ee-afea-b22530160653\",\"TipoEstado\":\"LECTURA\",\"ByteHexaFuncion\":\"0F\",\"ByteDecimalFuncion\":15}",
                            ModuloComponenteId = new Guid("a0891542-c300-486e-b6e8-7f544804ba1b"),
                            NombreComponente = "PH",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82")
                        },
                        new
                        {
                            Id = new Guid("a1564c77-c91c-44f9-82b9-ea17530781c2"),
                            ActividadId = new Guid("a457d4bd-3921-4a22-8d77-6d895de743c3"),
                            DireccionRegistro = (byte)1,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 701, DateTimeKind.Local).AddTicks(4196),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\"Id\":\"f5f738c7-0dba-48ee-afea-b22530160653\",\"TipoEstado\":\"LECTURA\",\"ByteHexaFuncion\":\"0F\",\"ByteDecimalFuncion\":15}",
                            ModuloComponenteId = new Guid("a0891542-c300-486e-b6e8-7f544804ba1b"),
                            NombreComponente = "NIVEL TANQUE",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82")
                        },
                        new
                        {
                            Id = new Guid("982114e1-3233-47a4-9587-f1c062078227"),
                            ActividadId = new Guid("a457d4bd-3921-4a22-8d77-6d895de743c3"),
                            DireccionRegistro = (byte)7,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 701, DateTimeKind.Local).AddTicks(4205),
                            Ip = "N/A",
                            JsonEstadoComponente = "{\"Id\":\"c781773b-7d7c-47f7-b5d0-34a4943ba907\",\"TipoEstado\":\"AJUSTE\",\"ByteHexaFuncion\":\"F0\",\"ByteDecimalFuncion\":240}",
                            ModuloComponenteId = new Guid("d67960bc-152c-4a9d-adac-7dd0ec51b9dc"),
                            NombreComponente = "SP_TEMPERATURA H2O",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            UpaId = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82")
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EEstadoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DescripcionEstado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("Id");

                    b.ToTable("estado_usuario", "usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescripcionEstado = "verificar cuenta"
                        },
                        new
                        {
                            Id = 2,
                            DescripcionEstado = "Activado"
                        },
                        new
                        {
                            Id = 3,
                            DescripcionEstado = "Inactivo"
                        },
                        new
                        {
                            Id = 4,
                            DescripcionEstado = "Bloqueado"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ELaboratorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ComponenteLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("componente_laboratorio_id");

                    b.Property<bool>("EstadoInternet")
                        .HasColumnType("boolean")
                        .HasColumnName("estado_internet");

                    b.Property<DateTime>("FechaCreacionDispositivo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_dispositivo");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.Property<int?>("TipoDeComunicacionId")
                        .HasColumnType("integer");

                    b.Property<string>("TramaEnviada")
                        .HasColumnType("text")
                        .HasColumnName("trama_enviada");

                    b.Property<string>("TramaRecibida")
                        .HasColumnType("text")
                        .HasColumnName("trama_recibida");

                    b.Property<double?>("ValorCalculadoTramaEnviada")
                        .HasColumnType("double precision")
                        .HasColumnName("dato_trama_enviada");

                    b.Property<double?>("ValorCalculadoTramaRecibida")
                        .HasColumnType("double precision")
                        .HasColumnName("dato_trama_recibida");

                    b.HasKey("Id");

                    b.HasIndex("ComponenteLaboratorioId");

                    b.HasIndex("TipoDeComunicacionId");

                    b.ToTable("detalle_laboratorio", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65bf6fc3-e7f4-4fe0-b523-a15c67e487dd"),
                            ComponenteLaboratorioId = new Guid("003bbddd-22fa-468e-b0c8-b66ac1586cd4"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2023, 2, 23, 20, 39, 30, 702, DateTimeKind.Local).AddTicks(979),
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 701, DateTimeKind.Local).AddTicks(9853),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TramaEnviada = "6FDAF029000000009834",
                            TramaRecibida = "49803CE33F8000008FC8",
                            ValorCalculadoTramaRecibida = 1.0
                        },
                        new
                        {
                            Id = new Guid("837cca96-ca85-4fa0-8491-79b0732e9bcd"),
                            ComponenteLaboratorioId = new Guid("b7f743f6-6bfd-4aba-bfdf-e64bc5575ee9"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2023, 2, 23, 20, 39, 30, 702, DateTimeKind.Local).AddTicks(1849),
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 702, DateTimeKind.Local).AddTicks(1839),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TramaEnviada = "495DF08E000000007B74",
                            TramaRecibida = "496D3C083F80000096D1",
                            ValorCalculadoTramaRecibida = 1.0
                        },
                        new
                        {
                            Id = new Guid("3048fe79-ef3f-401a-b252-f74e7abaa9bd"),
                            ComponenteLaboratorioId = new Guid("2fb34f39-a4d5-446d-8dc8-f4fd71587ad8"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2023, 2, 23, 20, 39, 30, 702, DateTimeKind.Local).AddTicks(1856),
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 702, DateTimeKind.Local).AddTicks(1854),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TramaEnviada = "493E0FA6000000007453",
                            TramaRecibida = "6FB2F0DC410E66663E8F",
                            ValorCalculadoTramaRecibida = 8.9000000000000004
                        },
                        new
                        {
                            Id = new Guid("0538cc1c-59a7-4f25-89ed-3b977d32b34a"),
                            ComponenteLaboratorioId = new Guid("2fb34f39-a4d5-446d-8dc8-f4fd71587ad8"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2023, 2, 23, 20, 39, 30, 702, DateTimeKind.Local).AddTicks(1860),
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 702, DateTimeKind.Local).AddTicks(1859),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TramaEnviada = "493E0FA6000000007453",
                            TramaRecibida = "6FEFF08440D66666F1A3",
                            ValorCalculadoTramaRecibida = 6.7000000000000002
                        },
                        new
                        {
                            Id = new Guid("e61c3ed2-c32d-43dc-a329-ea5f50b10e0b"),
                            ComponenteLaboratorioId = new Guid("982114e1-3233-47a4-9587-f1c062078227"),
                            EstadoInternet = true,
                            FechaCreacionDispositivo = new DateTime(2023, 2, 23, 20, 39, 30, 702, DateTimeKind.Local).AddTicks(2330),
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 702, DateTimeKind.Local).AddTicks(2322),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local",
                            TramaEnviada = "49F2F04541C00000A19A",
                            TramaRecibida = "6FEEF0D8434800001CA9",
                            ValorCalculadoTramaEnviada = 24.0,
                            ValorCalculadoTramaRecibida = 200.0
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EModuloComponente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_modulo");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.ToTable("modulo_componente", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7af0026-c029-4b24-b465-8e9f889ac9b8"),
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 512, DateTimeKind.Local).AddTicks(3162),
                            Ip = "N/A",
                            Nombre = "ACTUADORES",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("a0891542-c300-486e-b6e8-7f544804ba1b"),
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 512, DateTimeKind.Local).AddTicks(5830),
                            Ip = "N/A",
                            Nombre = "SENSORES",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("d67960bc-152c-4a9d-adac-7dd0ec51b9dc"),
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 512, DateTimeKind.Local).AddTicks(5850),
                            Ip = "N/A",
                            Nombre = "SET_POINT/CONTROL",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EProtocoloCOM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<byte>("PrimerByteTrama")
                        .HasColumnType("smallint")
                        .HasColumnName("primer_byte_trama");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("sigla");

                    b.Property<Guid>("UpaId")
                        .HasColumnType("uuid")
                        .HasColumnName("upa_id");

                    b.HasKey("Id");

                    b.HasIndex("UpaId");

                    b.ToTable("protocolo_com", "laboratorio_lestoma");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Peer to Peer",
                            PrimerByteTrama = (byte)73,
                            Sigla = "PP",
                            UpaId = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82")
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Broad Cast",
                            PrimerByteTrama = (byte)111,
                            Sigla = "BS",
                            UpaId = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82")
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Peer to Peer",
                            PrimerByteTrama = (byte)73,
                            Sigla = "PP",
                            UpaId = new Guid("7f73daea-1775-4a22-a58e-d050482f9dd7")
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Broad Cast",
                            PrimerByteTrama = (byte)111,
                            Sigla = "BS",
                            UpaId = new Guid("7f73daea-1775-4a22-a58e-d050482f9dd7")
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ERol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_rol");

                    b.HasKey("Id");

                    b.ToTable("rol", "usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreRol = "Super Administrador"
                        },
                        new
                        {
                            Id = 2,
                            NombreRol = "Administrador"
                        },
                        new
                        {
                            Id = 3,
                            NombreRol = "Auxiliar"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ESuperAdministrador", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("UsuarioId")
                        .HasColumnType("smallint")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.ToTable("super_administrador", "superadmin");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            UsuarioId = (short)1
                        },
                        new
                        {
                            Id = (short)2,
                            UsuarioId = (short)2
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<short>("CantidadActividades")
                        .HasColumnType("smallint")
                        .HasColumnName("cantidad_actividades");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_upa");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<int>("SuperAdminId")
                        .HasColumnType("integer")
                        .HasColumnName("superadmin_id");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.ToTable("upa", "superadmin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82"),
                            CantidadActividades = (short)5,
                            Descripcion = "queda ubicada en facatativá",
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 559, DateTimeKind.Local).AddTicks(1840),
                            Ip = "N/A",
                            Nombre = "finca el vergel",
                            Session = "Anonimo",
                            SuperAdminId = 1,
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = new Guid("7f73daea-1775-4a22-a58e-d050482f9dd7"),
                            CantidadActividades = (short)2,
                            Descripcion = "queda ubicada en la universidad cundinamarca extensión faca",
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 559, DateTimeKind.Local).AddTicks(1919),
                            Ip = "N/A",
                            Nombre = "ucundinamarca",
                            Session = "Anonimo",
                            SuperAdminId = 1,
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpaActividad", b =>
                {
                    b.Property<Guid>("UpaId")
                        .HasColumnType("uuid")
                        .HasColumnName("upa_id");

                    b.Property<Guid>("ActividadId")
                        .HasColumnType("uuid")
                        .HasColumnName("actividad_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("UpaId", "ActividadId", "UsuarioId");

                    b.HasIndex("ActividadId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("upa_actividad", "superadmin");

                    b.HasData(
                        new
                        {
                            UpaId = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82"),
                            ActividadId = new Guid("a457d4bd-3921-4a22-8d77-6d895de743c3"),
                            UsuarioId = 3,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 565, DateTimeKind.Local).AddTicks(5705),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82"),
                            ActividadId = new Guid("9d229436-a9c7-4849-a840-055af0c2b5a9"),
                            UsuarioId = 3,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 565, DateTimeKind.Local).AddTicks(5726),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82"),
                            ActividadId = new Guid("a457d4bd-3921-4a22-8d77-6d895de743c3"),
                            UsuarioId = 4,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 565, DateTimeKind.Local).AddTicks(5732),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("2cd48cd9-d3a3-4910-a430-474b42458b82"),
                            ActividadId = new Guid("9d229436-a9c7-4849-a840-055af0c2b5a9"),
                            UsuarioId = 4,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 565, DateTimeKind.Local).AddTicks(5735),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("7f73daea-1775-4a22-a58e-d050482f9dd7"),
                            ActividadId = new Guid("a457d4bd-3921-4a22-8d77-6d895de743c3"),
                            UsuarioId = 5,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 565, DateTimeKind.Local).AddTicks(5739),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            UpaId = new Guid("7f73daea-1775-4a22-a58e-d050482f9dd7"),
                            ActividadId = new Guid("9d229436-a9c7-4849-a840-055af0c2b5a9"),
                            UsuarioId = 5,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 565, DateTimeKind.Local).AddTicks(5743),
                            Ip = "N/A",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("clave");

                    b.Property<string>("CodigoRecuperacion")
                        .HasColumnType("text")
                        .HasColumnName("codigo_recuperacion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("estado_id");

                    b.Property<DateTime>("FechaCreacionServer")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion_server");

                    b.Property<DateTime?>("FechaVencimientoCodigo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("vencimiento_codigo_recuperacion");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<int>("RolId")
                        .HasColumnType("integer")
                        .HasColumnName("rol_id");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("semilla");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("TipoDeAplicacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_de_aplicacion");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("RolId");

                    b.ToTable("usuario", "usuarios");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Apellido = "Lestoma-APP",
                            Clave = "/+bAZfRo19ISeopIZznRcYFZiKKdQge0bTCgO+nYPTs=",
                            Email = "diegop177@hotmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 541, DateTimeKind.Local).AddTicks(4109),
                            Ip = "N/A",
                            Nombre = "Diego-Super",
                            RolId = 1,
                            Salt = "EHjW1Ad4fzFth3q8KDXD9A==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 1,
                            Apellido = "Movil",
                            Clave = "/+bAZfRo19ISeopIZznRcYFZiKKdQge0bTCgO+nYPTs=",
                            Email = "lestomaudecmovil@gmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 540, DateTimeKind.Local).AddTicks(9758),
                            Ip = "N/A",
                            Nombre = "Lestoma-APP",
                            RolId = 1,
                            Salt = "EHjW1Ad4fzFth3q8KDXD9A==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "Lestoma",
                            Clave = "dvGgJ9o5nMlPSToK69ygyqhLbqpOW2Gfz+YDla3HHJI=",
                            Email = "diegoarturo1598@hotmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 549, DateTimeKind.Local).AddTicks(4396),
                            Ip = "N/A",
                            Nombre = "Administrador",
                            RolId = 2,
                            Salt = "/Xiw7gavBof1n369KxJEbw==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 4,
                            Apellido = "Lestoma",
                            Clave = "wtZMpvYqfF9xBzkhjiiQ/An2PGtDwnQQzvqZK7Sg3p4=",
                            Email = "programadoresuc@outlook.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 557, DateTimeKind.Local).AddTicks(4040),
                            Ip = "N/A",
                            Nombre = "Auxiliar 1",
                            RolId = 3,
                            Salt = "+TqRSWfwd/Garx9tKWcypw==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        },
                        new
                        {
                            Id = 5,
                            Apellido = "Lestoma",
                            Clave = "wtZMpvYqfF9xBzkhjiiQ/An2PGtDwnQQzvqZK7Sg3p4=",
                            Email = "tudec2020@gmail.com",
                            EstadoId = 2,
                            FechaCreacionServer = new DateTime(2023, 2, 23, 20, 39, 30, 557, DateTimeKind.Local).AddTicks(4091),
                            Ip = "N/A",
                            Nombre = "Auxiliar 2",
                            RolId = 3,
                            Salt = "+TqRSWfwd/Garx9tKWcypw==",
                            Session = "Anonimo",
                            TipoDeAplicacion = "Local"
                        });
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EAlimentarPeces", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("alimentar_peces", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EControlAgua", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("control_de_agua", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EControlElectrico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("control_electrico", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EControlEntorno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("control_de_entorno", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.EControlHidroponico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("control_hidroponico", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.ModelsReports.ERecirculacionAgua", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AnteriorRegistroId")
                        .HasColumnType("uuid")
                        .HasColumnName("anterior_registro_id");

                    b.Property<string>("DetalleJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("detalle");

                    b.Property<Guid>("DetalleLaboratorioId")
                        .HasColumnType("uuid")
                        .HasColumnName("detalle_laboratorio_id");

                    b.HasKey("Id");

                    b.ToTable("recirculacion_de_agua", "reportes");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EComponenteLaboratorio", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EActividad", "Actividad")
                        .WithMany()
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EModuloComponente", "ModuloComponente")
                        .WithMany()
                        .HasForeignKey("ModuloComponenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EUpa", "Upa")
                        .WithMany()
                        .HasForeignKey("UpaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("ModuloComponente");

                    b.Navigation("Upa");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ELaboratorio", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EComponenteLaboratorio", "ComponenteLaboratorio")
                        .WithMany()
                        .HasForeignKey("ComponenteLaboratorioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EProtocoloCOM", "TipoDeComunicacion")
                        .WithMany()
                        .HasForeignKey("TipoDeComunicacionId");

                    b.Navigation("ComponenteLaboratorio");

                    b.Navigation("TipoDeComunicacion");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EProtocoloCOM", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EUpa", "Upa")
                        .WithMany("ProtocolosCOM")
                        .HasForeignKey("UpaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Upa");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpaActividad", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EActividad", "Actividad")
                        .WithMany()
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EUpa", "Upa")
                        .WithMany()
                        .HasForeignKey("UpaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.EUsuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("Upa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUsuario", b =>
                {
                    b.HasOne("lestoma.Entidades.Models.EEstadoUsuario", "EstadoUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lestoma.Entidades.Models.ERol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("lestoma.Entidades.Models.ETokensUsuarioByAplicacion", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<int>("AplicacionId")
                                .HasColumnType("integer")
                                .HasColumnName("aplicacion_id");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("fecha_creacion");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("text")
                                .HasColumnName("creado_por_ip");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("expiracion");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("text")
                                .HasColumnName("reeemplazado_por_token");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("fecha_revocacion");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("text")
                                .HasColumnName("revocado_por_ip");

                            b1.Property<string>("Token")
                                .HasColumnType("text")
                                .HasColumnName("token");

                            b1.Property<int>("usuario_id")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("usuario_id");

                            b1.ToTable("tokens_usuario_por_aplicacion", "seguridad");

                            b1.WithOwner()
                                .HasForeignKey("usuario_id");
                        });

                    b.Navigation("EstadoUsuario");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EEstadoUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.ERol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("lestoma.Entidades.Models.EUpa", b =>
                {
                    b.Navigation("ProtocolosCOM");
                });
#pragma warning restore 612, 618
        }
    }
}
